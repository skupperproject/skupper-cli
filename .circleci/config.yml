version: 2.1
orbs:
    docker: circleci/docker@1.0.1
    kube-orb: circleci/kubernetes@0.11.0
    go: circleci/go@1.1.1

executors:
  e2e_tets_executor:
    machine:
      image: circleci/classic:latest

commands:
  minikube-install:
    description: Installs the minikube executable onto the system.
    parameters:
      version:
        default: v0.30.0
        type: string
    steps:
      - run:
          command: >-
            curl -Lo minikube
            https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && 
            chmod +x minikube && sudo
            mv minikube /usr/local/bin/
          name: Install Minikube Executable

  minikube-start:
    description: Starts the minikube service.
    steps:
      - run:
          command: >-
            minikube start --vm-driver=docker --cpus 2 --memory 2048
          name: Start Minikube Cluster

  minikube-start-load-balancer:
    description: Starts the minikube tunnel
    steps:
      - run:
          command: >-
            sudo minikube tunnel &
          name: Start Minikube Tunnel

  kind-start:
    description: install kind cluster
    steps:
      - run:
          name: get kind
          command: env GO111MODULE=off go get sigs.k8s.io/kind
      - run:
          name: Create kind cluster
          command: kind create cluster --wait 30m

  prepare_for_local_cluster_e2e:
    description: install right versions of go, docker, kubectl, and also build
    steps:
      - run:
          #TODO add a comment saying why is this needed.
          name: Export environment variables persistent in execution shell
          command: |
            echo 'export KUBECONFIG=/home/circleci/.kube/config' >> $BASH_ENV
            echo 'export GOROOT=/usr/local/go' >> $BASH_ENV
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$GOROOT/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - run:
          name: cleanup previous go installation
          command: sudo rm -rf /usr/local/go
      - docker/install-docker
      - go/install
      - kube-orb/install-kubectl
      - run: make

  run_e2e_tests:
    description: run all e2e tests inside the current KUBECONFIG configured cluster
    #In this step is where we execute shipshape, ginkgo, kubetest or whatever.
    parameters:
      args:
        default: ""
        type: string
    steps:
      - run:
          name: Run Tests
          command: ./skupper_smoke #not supported for now << parameters.args >>

yaml-templates:
  branch_filters: &branch_filters
    filters:
      branches:
        only: /.*/
      tags:
        only: /[0-9].*/

  release_filters: &release_filters
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /[0-9].*/

  restore_go_cache: &restore_go_cache
    restore_cache:
      keys:
        - go-mod-v1-{{.Environment.GOOS}}-{{.Environment.GOARCH}}-{{ checksum "go.sum" }}
  go_mod_download: &go_mod_download
    run:
      name: Download Go Modules
      command: go mod download
  save_go_cache: &save_go_cache
    save_cache:
      key: go-mod-v1-{{.Environment.GOOS}}-{{.Environment.GOARCH}}-{{ checksum "go.sum" }}
      paths:
        - "/go/pkg/mod"
  compile_go_executable: &compile_go_executable
    run:
      name: Compile Go Executable
      command: |
        VERSION="${CIRCLE_TAG:-ci-${CIRCLE_BUILD_NUM}}"
        echo go build -ldflags "-X main.version=${VERSION}" -o dist/${PLATFORM:-${GOOS}-${GOARCH}}/skupper${EXESUFFIX} ./cmd/skupper
        go build -ldflags "-X main.version=${VERSION}" -o dist/${PLATFORM:-${GOOS}-${GOARCH}}/skupper${EXESUFFIX} ./cmd/skupper
  store_dist: &store_dist
    persist_to_workspace:
      root: .
      paths:
        - dist

  requires_fast_jobs: &requires_fast_jobs
    requires:
      - build-linux-386
      - build-linux-amd64
      - build-darwin-386
      - build-darwin-amd64
      - build-windows-386
      - build-windows-amd64
      - build-linux-arm
      - build-linux-arm64
      - test

  requires_slow_jobs: &requires_slow_jobs
    requires:
      - minikube_local_cluster_e2e_tests
      - kind_local_cluster_e2e_tests

workflows:
  version: 2.1
  build-workflow:
    jobs:
      - build-linux-386:
          <<: *release_filters
      - build-linux-amd64:
          <<: *branch_filters
      - build-darwin-386:
          <<: *release_filters
      - build-darwin-amd64:
          <<: *branch_filters
      - build-windows-386:
          <<: *release_filters
      - build-windows-amd64:
          <<: *branch_filters
      - build-linux-arm:
          <<: *release_filters
      - build-linux-arm64:
          <<: *release_filters
      - test:
          <<: *branch_filters

      - minikube_local_cluster_e2e_tests:
          <<: *branch_filters
          pre-steps:
            - prepare_for_local_cluster_e2e
          <<: *requires_fast_jobs

      - kind_local_cluster_e2e_tests:
          <<: *branch_filters
          pre-steps:
            - prepare_for_local_cluster_e2e
          <<: *requires_fast_jobs

      - publish-github-release:
          <<: *release_filters
          <<: *requires_slow_jobs

jobs:
  build-linux-amd64: &go_build
    docker:
      - image: circleci/golang:1.13
    environment: &environment
      GOOS: linux
      GOARCH: amd64
      PLATFORM: linux-amd64
    steps:
      - checkout
      - <<: *restore_go_cache
      - <<: *go_mod_download
      - <<: *save_go_cache
      - <<: *compile_go_executable
      - <<: *store_dist

  build-linux-386:
    <<: *go_build
    environment:
      GOOS: linux
      GOARCH: 386
      PLATFORM: linux-i386

  build-windows-386:
    <<: *go_build
    environment:
      GOOS: windows
      GOARCH: 386
      PLATFORM: windows-i386
      EXESUFFIX: ".exe"

  build-windows-amd64:
    <<: *go_build
    environment:
      GOOS: windows
      GOARCH: amd64
      PLATFORM: windows-amd64
      EXESUFFIX: ".exe"

  build-darwin-386:
    <<: *go_build
    environment:
      GOOS: darwin
      GOARCH: 386
      PLATFORM: mac-i386

  build-darwin-amd64:
    <<: *go_build
    environment:
      GOOS: darwin
      GOARCH: amd64
      PLATFORM: mac-amd64

  build-linux-arm:
    <<: *go_build
    environment:
      GOOS: linux
      GOARCH: arm
      PLATFORM: linux-arm32

  build-linux-arm64:
    <<: *go_build
    environment:
      GOOS: linux
      GOARCH: arm64
      PLATFORM: linux-arm64

  test:
    <<: *go_build
    steps:
      - checkout
      - <<: *restore_go_cache
      - <<: *go_mod_download
      - <<: *save_go_cache
      - run:
          name: Run Tests
          command: go test ./...

  minikube_local_cluster_e2e_tests:
    executor: e2e_tets_executor
    environment: &environment
    steps:
      - minikube-install
      - minikube-start
      - minikube-start-load-balancer
      - run: kubectl cluster-info
      - run_e2e_tests:
          args: "" #no cluster local since minikube has load balancer

  kind_local_cluster_e2e_tests:
    executor: e2e_tets_executor
    environment: &environment
    steps:
      - kind-start
      - run: kubectl cluster-info
      - run_e2e_tests:
          args: "--cluster-local" #cluster local since kind has no load balancer

  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Create a Draft Release on GitHub"
          command: |
            VERSION="$CIRCLE_TAG"
            BASEDIR=`pwd`
            mkdir "${BASEDIR}/archives"
            for p in `ls dist` ; do
              cd "$BASEDIR/dist/$p"
              if [[ $p == windows* ]] ; then
                zip -q "${BASEDIR}/archives/skupper-cli-${VERSION}-$p.zip" *
              else
                tar -zcf "${BASEDIR}/archives/skupper-cli-${VERSION}-$p.tgz" *
              fi
            done
            cd ${BASEDIR}
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -replace -prerelease -draft ${VERSION} "${BASEDIR}/archives"
